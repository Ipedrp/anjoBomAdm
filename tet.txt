

    return (
        <>
           

            <div className="lista-listaPontoColeta-container">
                {!editando ? (
                    <>
                        {!pontos.length ? (
                            <div className="array-vazio">
                                <h1>No momento não há pontos de coleta!</h1>
                            </div>
                        ) : isMobile ? (
                            // Versão Mobile
                            <div className="mobile-table-container">
                                {pontoColetaPaginaAtual.map((ponto) => (
                                    <div key={ponto.id} className="mobile-table-row">
                                        <div className="mobile-table-cell">
                                            <strong>Nome:</strong> {ponto.name}
                                        </div>
                                        <div className="mobile-table-cell">
                                            <strong>Endereço:</strong> {ponto.address.rua}
                                        </div>
                                        <div className="mobile-table-actions">
                                            <Icon name="pencil" color="yellow" size="large" onClick={() => handleEditarPonto(ponto)} />
                                            <Icon name="trash alternate outline" color="red" size="large" onClick={() => confirmarDelecao(ponto.id)} />
                                        </div>
                                    </div>
                                ))}
                            </div>
                        ) : (
                            // Versão Desktop
                            <Table celled>
                                <Table.Header>
                                    <Table.Row className="table-row-listaPontoColeta">
                                        <Table.HeaderCell>Nome</Table.HeaderCell>
                                        <Table.HeaderCell>Endereço</Table.HeaderCell>
                                        <Table.HeaderCell>Ações</Table.HeaderCell>
                                    </Table.Row>
                                </Table.Header>
                                <Table.Body>
                                    {pontoColetaPaginaAtual.map((ponto) => (
                                        <Table.Row key={ponto.id}>
                                            <Table.Cell>{ponto.name}</Table.Cell>
                                            <Table.Cell>{ponto.address.cidade}</Table.Cell>
                                            <Table.Cell>
                                                <Icon name="pencil" color="yellow" size="large" onClick={() => handleEditarPonto(ponto)} style={{ cursor: 'pointer' }} />
                                                <Icon name="trash alternate outline" color="red" size="large" onClick={() => confirmarDelecao(ponto.id)} style={{ cursor: 'pointer' }} />
                                            </Table.Cell>
                                        </Table.Row>
                                    ))}
                                </Table.Body>
                            </Table>
                        )}

                        {/* Paginação */}
                        <Menu pagination color="red" className="nav-pag">
                            <MenuItem as="a" icon onClick={() => handlePaginaClick(Math.max(1, paginaAtual - 1))} disabled={paginaAtual === 1}>
                                <Icon name="chevron left" />
                            </MenuItem>
                            {[...Array(paginasTotais)].map((_, index) => (
                                <MenuItem as="a" key={index + 1} active={paginaAtual === index + 1} onClick={() => handlePaginaClick(index + 1)}>
                                    {index + 1}
                                </MenuItem>
                            ))}
                            <MenuItem as="a" icon onClick={() => handlePaginaClick(Math.min(paginasTotais, paginaAtual + 1))} disabled={paginaAtual === paginasTotais}>
                                <Icon name="chevron right" />
                            </MenuItem>
                        </Menu>
                    </>
                ) : (
                    // Formulário de Edição
                    <Form className="form-editar-ponto">
                        <Form.Field>
                            <label>Nome</label>
                            <Input value={formCriarPontoColeta.name} onChange={(e) => setFormCriarPontoColeta({ ...formCriarPontoColeta, name: e.target.value })} />
                        </Form.Field>
                        <Form.Field>
                            <label>CEP</label>
                            <Input value={formCriarPontoColeta.address.cep} onChange={(e) => setFormCriarPontoColeta({ ...formCriarPontoCo
